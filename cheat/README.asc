Git Cheat Sheet
===============
:toc:
:toc-placement: preamble
:toclevels: 1
:foobar: baz



== CREATE
Clone an existing repository
[source,bash]
------------------------------------------
$ git clone ssh://user@domain.com/repo.git
------------------------------------------

Create a new local repository
[source,bash]
------------------------------------------
$ git init
------------------------------------------

== LOCAL CHANGES

Changed files in your working directory
[source,bash]
------------------------------------------
$ git status
------------------------------------------

Changes to tracked files
[source,bash]
------------------------------------------
$ git diff
------------------------------------------

Add all current changes to the next commit
[source,bash]
------------------------------------------
$ git add .
------------------------------------------

Add some changes in <file> to the next commit
[source,bash]
------------------------------------------
$ git add -p <file>
------------------------------------------

Commit all local changes in tracked files
[source,bash]
------------------------------------------
$ git commit -a
------------------------------------------

Commit previously staged changes
[source,bash]
------------------------------------------
$ git commit
------------------------------------------

Change the last commit
Don‘t amend published commits!
[source,bash]
------------------------------------------
$ git commit --amend
------------------------------------------

== COMMIT HISTORY

Show all commits, starting with newest
[source,bash]
------------------------------------------
$ git log
------------------------------------------

Show changes over time for a specific file
[source,bash]
------------------------------------------
$ git log -p <file>
------------------------------------------

Who changed what and when in <file>
[source,bash]
------------------------------------------
$ git blame <file>
------------------------------------------

== BRANCHES & TAGS

List all existing branches
[source,bash]
------------------------------------------
$ git branch -av
------------------------------------------

Switch HEAD branch
[source,bash]
------------------------------------------
$ git checkout <branch>
------------------------------------------

Create a new branch based on your current HEAD
[source,bash]
------------------------------------------
$ git branch <new-branch>
------------------------------------------

Create a new tracking branch based on a remote branch
[source,bash]
------------------------------------------
$ git checkout --track <remote/branch>
------------------------------------------

Delete a local branch
[source,bash]
------------------------------------------
$ git branch -d <branch>
------------------------------------------

Mark the current commit with a tag
[source,bash]
------------------------------------------
$ git tag <tag-name>
------------------------------------------

== UPDATE & PUBLISH

List all currently configured remotes
[source,bash]
------------------------------------------
$ git remote -v
------------------------------------------

Show information about a remote
[source,bash]
------------------------------------------
$ git remote show <remote>
------------------------------------------

Add new remote repository, named <remote>
[source,bash]
------------------------------------------
$ git remote add <shortname> <url>
------------------------------------------

Download all changes from <remote>, but don‘t integrate into HEAD
[source,bash]
------------------------------------------
$ git fetch <remote>
------------------------------------------

Download changes and directly merge/integrate into HEAD
[source,bash]
------------------------------------------
$ git pull <remote> <branch>
------------------------------------------

Publish local changes on a remote
[source,bash]
------------------------------------------
$ git push <remote> <branch>
------------------------------------------

Delete a branch on the remote
[source,bash]
------------------------------------------
$ git branch -dr <remote/branch>
------------------------------------------

Publish your tag s
[source,bash]
------------------------------------------
$ git push --tags
------------------------------------------

== MERGE & REBASE

Merge <branch> into your current HEAD
[source,bash]
------------------------------------------
$ git merge <branch>
------------------------------------------

Rebase your current HEAD onto <branch> Don‘t rebase published commits!
[source,bash]
------------------------------------------
$ git rebase <branch>
------------------------------------------

Abort a rebase
[source,bash]
------------------------------------------
$ git rebase --abort
------------------------------------------

Continue a rebase after resolving conflicts
[source,bash]
------------------------------------------
$ git rebase --continue
------------------------------------------

Use your configured merge tool to solve conflicts
[source,bash]
------------------------------------------
$ git mergetool
------------------------------------------

Use your editor to manually solve conflicts and (after resolving) mark file as resolved
[source,bash]
------------------------------------------
$ git add <resolved-file>
$ git rm <resolved-file>
------------------------------------------

== UNDO
Discard all local changes in your working directory
[source,bash]
------------------------------------------
$ git reset --hard HEAD
------------------------------------------

Discard local changes in a specific file
[source,bash]
------------------------------------------
$ git checkout HEAD <file>
------------------------------------------

Revert a commit (by producing a new commit with contrary changes)
[source,bash]
------------------------------------------
$ git revert <commit>
------------------------------------------

Reset your HEAD pointer to a previous commit ... and discard all changes since then
[source,bash]
------------------------------------------
$ git reset --hard <commit>
------------------------------------------

... and preserve all changes as unstaged
changes
[source,bash]
------------------------------------------
$ git reset <commit>
------------------------------------------

... and preserve uncommitted local changes
[source,bash]
------------------------------------------
$ git reset --keep <commit>
------------------------------------------

== Language Support

http://pygments.org/docs/lexers/#lexers-for-agile-languages
